using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        
        
        bool turn = true; // true = whid side; false = sort 
        int turn_counter = 0;
        public Form1()
        {
            InitializeComponent();
            
           
        }
        public void Form1_Load(object sender, EventArgs e)
        {
            chessboard();
        }
        private void btn_copy(object sender, EventArgs e)
        {
            Button b = (Button)sender;

            if (turn == true && (b.Text.Contains("\u2654") || b.Text.Contains("\u2655") || b.Text.Contains("\u2656") || b.Text.Contains("\u2657") || b.Text.Contains("\u2658") || b.Text.Contains("\u2659")))
            {

                Clipboard.SetText(b.Text);
                b.Text = "";

                copypaste();
                b.Click -= new EventHandler(btn_copy);
                b.Click += new EventHandler(btnPaste_Click);
                 }
            else if(turn == false &&(b.Text.Contains("\u265a") || b.Text.Contains("\u265b") || b.Text.Contains("\u265c") || b.Text.Contains("\u265d") || b.Text.Contains("\u265e") || b.Text.Contains("\u265f")))
            {
                                Clipboard.SetText(b.Text);

                b.Text = "";
                copypaste();
                                b.Click -= new EventHandler(btn_copy);
                b.Click += new EventHandler(btnPaste_Click);
            }
            else
            {
                label1.Text += "\nForkert Brik!";
            }
        }
        private void btnPaste_Click(object sender, EventArgs e)
        {
            Button bc = (Button)sender;
            bc.Text = Clipboard.GetText();
           
            var C = getall(this, typeof(Button));
            foreach (Control buttens in C)
            {
                if (buttens.Text.Contains("\u2654") || buttens.Text.Contains("\u2655")|| buttens.Text.Contains("\u2656")|| buttens.Text.Contains("\u2657")|| buttens.Text.Contains("\u2658")|| buttens.Text.Contains("\u2659")|| buttens.Text.Contains("\u265a")|| buttens.Text.Contains("\u265b")|| buttens.Text.Contains("\u265c")|| buttens.Text.Contains("\u265d")|| buttens.Text.Contains("\u265e")|| buttens.Text.Contains("\u265f") )
                {
                    buttens.Click -= new EventHandler(btnPaste_Click);
                    buttens.Click += new EventHandler(btn_copy);
                    
                }
                
                
                
            }
            if ( turn == true)
            {

                bc.ForeColor = Color.White;
                label1.Text ="Sorts tur!";
                Clipboard.Clear();
                turn = false;   
            }
            else
            {
                bc.ForeColor = Color.Black;
                label1.Text = "Hvids Tur!";
                Clipboard.Clear();
                turn = true;
            }
            
        }
        public IEnumerable<Control> getall(Control control, Type type)
        {
            var controls = control.Controls.Cast<Control>();
            return controls.SelectMany(ctrl => getall(ctrl, type))
                .Concat(controls)
                .Where(c => c.GetType() == type);
        }
        private void copypaste()
        {
            var C = getall(this, typeof(Button));
            foreach (Control buttens in C)
            {
                if (buttens.Text.Contains("\u2654") || buttens.Text.Contains("\u2655") || buttens.Text.Contains("\u2656") || buttens.Text.Contains("\u2657") || buttens.Text.Contains("\u2658") || buttens.Text.Contains("\u2659") || buttens.Text.Contains("\u265a") || buttens.Text.Contains("\u265b") || buttens.Text.Contains("\u265c") || buttens.Text.Contains("\u265d") || buttens.Text.Contains("\u265e") || buttens.Text.Contains("\u265f"))
                {
                    buttens.Click -= new EventHandler(btn_copy);
                    buttens.Click += new EventHandler(btnPaste_Click);
                }

            }

        }
        private void chessboard()
        {
            #region
            // sorte skak symboler
            string sort_tårn = "\u265c";
            string sort_hest = "\u265E";
            string sort_løber = "\u265D";
            string sort_dronning = "\u265B";
            string sort_konge = "\u265A";
            string sort_bønner = "\u265F";
            // hvide skak symboler
            string hvid_tårn = "\u2656";
            string hvid_hest = "\u2658";
            string hvid_løber = "\u2657";
            string hvid_dronning = "\u2655";
            string hvid_konge = "\u2654";
            string hvid_bønner = "\u2659";





            // start position sort
            h1.Text = sort_tårn;
            h2.Text = sort_hest;
            h3.Text = sort_løber;
            h4.Text = sort_dronning;
            h5.Text = sort_konge;
            h6.Text = sort_løber;
            h7.Text = sort_hest;
            h8.Text = sort_tårn;
            g8.Text = sort_bønner;
            g7.Text = sort_bønner;
            g6.Text = sort_bønner;
            g5.Text = sort_bønner;
            g4.Text = sort_bønner;
            g3.Text = sort_bønner;
            g2.Text = sort_bønner;
            g1.Text = sort_bønner;


            // start position hvid
            a1.Text = hvid_tårn;
            a2.Text = hvid_hest;
            a3.Text = hvid_løber;
            a4.Text = hvid_konge;
            a5.Text = hvid_dronning;
            a6.Text = hvid_løber;
            a7.Text = hvid_hest;
            a8.Text = hvid_tårn;
            b8.Text = hvid_bønner;
            b7.Text = hvid_bønner;
            b6.Text = hvid_bønner;
            b5.Text = hvid_bønner;
            b4.Text = hvid_bønner;
            b3.Text = hvid_bønner;
            b2.Text = hvid_bønner;
            b1.Text = hvid_bønner;


            string[,] board = new string[,] {
                               { "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", },
                               { "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", },
                               { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", },
                               { "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", },
                               { "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", },
                               { "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", },
                               { "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", },
                               { "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8"  }};
            #region boardarray
            //a1 til a8
            board[7, 0] = a1.ToString();
            board[7, 1] = a2.ToString();
            board[7, 2] = a3.ToString();
            board[7, 3] = a4.ToString();
            board[7, 4] = a5.ToString();
            board[7, 5] = a6.ToString();
            board[7, 6] = a7.ToString();
            board[7, 7] = a8.ToString();
            //b1 til b8
            board[6, 0] = b1.ToString();
            board[6, 1] = b2.ToString();
            board[6, 2] = b3.ToString();
            board[6, 3] = b4.ToString();
            board[6, 4] = b5.ToString();
            board[6, 5] = b6.ToString();
            board[6, 6] = b7.ToString();
            board[6, 7] = b8.ToString();
            //c1 til C
            board[5, 0] = c1.ToString();
            board[5, 2] = c2.ToString();
            board[5, 2] = c3.ToString();
            board[5, 3] = c4.ToString();
            board[5, 4] = c5.ToString();
            board[5, 5] = c6.ToString();
            board[5, 6] = c7.ToString();
            board[5, 7] = c8.ToString();
            //d1 til d8
            board[4, 0] = d1.ToString();
            board[4, 1] = d2.ToString();
            board[4, 2] = d3.ToString();
            board[4, 3] = d4.ToString();
            board[4, 4] = d5.ToString();
            board[4, 5] = d6.ToString();
            board[4, 6] = d7.ToString();
            board[4, 7] = d8.ToString();
            //e1 til d8
            board[3, 0] = e1.ToString();
            board[3, 1] = e2.ToString();
            board[3, 2] = e3.ToString();
            board[3, 3] = e4.ToString();
            board[3, 4] = e5.ToString();
            board[3, 5] = e6.ToString();
            board[3, 6] = e7.ToString();
            board[3, 7] = e8.ToString();
            //f1 til f8
            board[2, 0] = f1.ToString();
            board[2, 1] = f2.ToString();
            board[2, 2] = f3.ToString();
            board[2, 3] = f4.ToString();
            board[2, 4] = f5.ToString();
            board[2, 5] = f6.ToString();
            board[2, 6] = f7.ToString();
            board[2, 7] = f8.ToString();
            //G1 til G8
            board[1, 0] = g1.ToString();
            board[1, 1] = g2.ToString();
            board[1, 2] = g3.ToString();
            board[1, 3] = g4.ToString();
            board[1, 4] = g5.ToString();
            board[1, 5] = g6.ToString();
            board[1, 6] = g7.ToString();
            board[1, 7] = g8.ToString();
            //H1 til H8
            board[0, 0] = h1.ToString();
            board[0, 1] = h2.ToString();
            board[0, 2] = h3.ToString();
            board[0, 3] = h4.ToString();
            board[0, 4] = h5.ToString();
            board[0, 5] = h6.ToString();
            board[0, 6] = h7.ToString();
            board[0, 7] = h8.ToString();
            #endregion
            #endregion

        }
        private void tower()
        {
            chessboard();
 

        }

        }

    }

